# app.py
from __future__ import annotations
import json
import requests
import pandas as pd
import streamlit as st

# =======================
# C·∫•u h√¨nh
# =======================
API_URL = "http://127.0.0.1:8000"   # ƒë·ªïi n·∫øu b·∫°n ch·∫°y API ·ªü host/port kh√°c

ROUTES = ["USA", "JAPAN", "TW", "KOREA"]
SERVICES = {"H√†ng th∆∞·ªùng (normal)": "normal", "H√†ng ƒë√¥ng l·∫°nh (frozen)": "frozen"}

st.set_page_config(
    page_title="H·ªá th·ªëng b√°o gi√° Logistics",
    page_icon="üì¶",
    layout="centered",
)

# =======================
# UI ‚Äî Nh·∫≠p li·ªáu
# =======================
st.title("üì¶ H·ªá th·ªëng b√°o gi√° Logistics")

with st.expander("üîß C·∫•u h√¨nh (t√πy ch·ªçn)", expanded=False):
    api_input = st.text_input("API URL", value=API_URL, help="V√≠ d·ª•: http://127.0.0.1:8000")
    API_URL = api_input.strip() or API_URL

st.subheader("Nh·∫≠p th√¥ng tin ƒë·ªÉ t√≠nh b√°o gi√°")

c1, c2 = st.columns(2)
route = c1.selectbox("Tuy·∫øn qu·ªëc t·∫ø", ROUTES, index=1)           # m·∫∑c ƒë·ªãnh JAPAN
service_label = c2.selectbox("Lo·∫°i h√†ng", list(SERVICES.keys()), index=0)
service = SERVICES[service_label]

c3, c4 = st.columns(2)
gw = c3.number_input("GW ‚Äî C√¢n n·∫∑ng th·ª±c t·∫ø (kg)", min_value=0.0, step=0.5, format="%.2f", value=12.0)
length_cm = c4.number_input("D ‚Äî D√†i (cm)", min_value=0.0, step=1.0, value=50.0)

c5, c6 = st.columns(2)
width_cm  = c5.number_input("R ‚Äî R·ªông (cm)", min_value=0.0, step=1.0, value=40.0)
height_cm = c6.number_input("C ‚Äî Cao (cm)",  min_value=0.0, step=1.0, value=30.0)

items_text = st.text_input("M·∫∑t h√†ng (ph√¢n t√°ch d·∫•u ph·∫©y)", value="m·ªπ ph·∫©m, ƒëi·ªán tho·∫°i")

btn = st.button("üöÄ T√≠nh b√°o gi√°", type="primary")

# =======================
# G·ªçi API & Hi·ªÉn th·ªã
# =======================
def vnd(x):
    if x is None:
        return "‚Äî"
    try:
        return f"{float(x):,.0f} VND"
    except Exception:
        return str(x)

if btn:
    # ki·ªÉm tra input
    if gw <= 0 or length_cm <= 0 or width_cm <= 0 or height_cm <= 0:
        st.error("Vui l√≤ng nh·∫≠p GW v√† D/R/C > 0.")
        st.stop()

    payload = {
        "route": route,
        "service": service,
        "gw": gw,
        "length_cm": length_cm,
        "width_cm": width_cm,
        "height_cm": height_cm,
        "items": [s.strip() for s in items_text.split(",") if s.strip()],
    }

    try:
        resp = requests.post(f"{API_URL}/quote", json=payload, timeout=30)
    except requests.exceptions.ConnectionError:
        st.error("Kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c API. H√£y ki·ªÉm tra xem b·∫°n ƒë√£ ch·∫°y `uvicorn api:app --reload --port 8000` ch∆∞a.")
        st.stop()
    except Exception as e:
        st.error(f"L·ªói g·ªçi API: {e}")
        st.stop()

    if resp.status_code != 200:
        try:
            detail = resp.json()
        except Exception:
            detail = resp.text
        st.error(f"L·ªói t·ª´ API ({resp.status_code}): {detail}")
        st.stop()

    data = resp.json()

    # --- Th√¥ng tin t·ªïng quan
    st.success("‚úÖ ƒê√£ t√≠nh xong b√°o gi√°")
    meta_cols = st.columns(4)
    meta_cols[0].metric("Tuy·∫øn", data.get("route_resolved", route))
    meta_cols[1].metric("Lo·∫°i h√†ng", data.get("service", service))
    meta_cols[2].metric("GW (kg)", f"{data.get('gw', 0):,.2f}")
    meta_cols[3].metric("CW (kg)", f"{data.get('cw', 0):,.2f}")

    # DW & l∆∞u √Ω
    dw = data.get("dw", 0)
    ignore_dw = data.get("ignore_dw", False)
    info_cols = st.columns(2)
    info_cols[0].metric("DW (kg)", f"{dw:,.2f}")
    if ignore_dw:
        info_cols[1].write(":orange[Qu·ªëc gia n√†y b·ªè DW ‚Üí t√≠nh theo GW.]")

    # --- Gi√° qu·ªëc t·∫ø
    st.subheader("üí∏ C∆∞·ªõc qu·ªëc t·∫ø")
    price_cols = st.columns(2)
    price_cols[0].metric("ƒê∆°n gi√° (VND/kg)", vnd(data.get("unit_price_vnd_per_kg")))
    price_cols[1].metric("T·ªïng c∆∞·ªõc qu·ªëc t·∫ø", vnd(data.get("intl_total_vnd")))

    # --- Ph·ª• ph√≠ theo t·ª´ng m·∫∑t h√†ng
    st.subheader("üßæ Ph·ª• ph√≠ theo m·∫∑t h√†ng")
    surcharge_items = data.get("surcharge_items", []) or []
    if surcharge_items:
        df = pd.DataFrame(surcharge_items)
        # ƒë·ªïi t√™n c·ªôt, format s·ªë
        rename_map = {
            "item_display": "M·∫∑t h√†ng",
            "display_text": "Ph·ª• thu (hi·ªÉn th·ªã)",
            "min_vnd": "Min (VND)",
            "max_vnd": "Max (VND)",
            "unit": "ƒê∆°n v·ªã"
        }
        df_show = df.rename(columns=rename_map)
        if "Min (VND)" in df_show:
            df_show["Min (VND)"] = df_show["Min (VND)"].apply(lambda x: f"{x:,}" if pd.notna(x) else "‚Äî")
        if "Max (VND)" in df_show:
            df_show["Max (VND)"] = df_show["Max (VND)"].apply(lambda x: f"{x:,}" if pd.notna(x) else "‚Äî")
        st.dataframe(df_show[["M·∫∑t h√†ng","Ph·ª• thu (hi·ªÉn th·ªã)","Min (VND)","Max (VND)","ƒê∆°n v·ªã"]], use_container_width=True)
    else:
        st.info("Kh√¥ng c√≥ danh s√°ch ph·ª• ph√≠ (ho·∫∑c b·∫°n ƒë·ªÉ tr·ªëng tr∆∞·ªùng M·∫∑t h√†ng).")

    # T·ªïng ph·ª• ph√≠ (text m√¥ t·∫£ do API k·∫øt lu·∫≠n)
    st.write(f"**T·ªïng ph·ª• thu:** {data.get('surcharge_text','‚Äî')}")

    # --- T·ªïng c·ªông
    st.subheader("üßÆ T·ªïng c·ªông (∆∞·ªõc t√≠nh)")
    grand_min = data.get("grand_total_min")
    grand_max = data.get("grand_total_max")

    if grand_min is None and grand_max is None:
        st.warning("Ch∆∞a ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ t√≠nh t·ªïng c·ªông (c√≥ th·ªÉ ƒë∆°n gi√° qu·ªëc t·∫ø ho·∫∑c ph·ª• ph√≠ l√† 'Li√™n h·ªá').")
    else:
        if grand_max is None or abs(grand_min - grand_max) < 1e-6:
            st.success(f"**T·ªïng gi√°:** {vnd(grand_min)}")
        else:
            st.success(f"**T·ªïng gi√°:** {vnd(grand_min)} ‚Äì {vnd(grand_max)}")
    st.divider()
    st.header("üöö T·ªëi ∆∞u ph∆∞∆°ng th·ª©c l·∫•y h√†ng (T3)")
    
    with st.expander("Nh·∫≠p th√¥ng tin l·∫•y h√†ng", expanded=True):
        c1, c2, c3, c4 = st.columns([1,1,1,1])
        with c1:
            lat = st.number_input("LAT", value=10.77, step=0.0001, format="%.6f")
        with c2:
            lon = st.number_input("LON", value=106.70, step=0.0001, format="%.6f")
        with c3:
            preferred_branch = st.selectbox("CN ∆∞u ti√™n", ["", "HCM", "CanTho"], index=0)
        with c4:
            svc_pick = st.selectbox("Lo·∫°i h√†ng (T3)", ["normal","frozen"])
    
        if st.button("T√≠nh ph∆∞∆°ng √°n l·∫•y h√†ng", type="primary"):
            try:
                payload_pick = {
                    "lat": lat, "lon": lon,
                    "weight": gw,                # d√πng GW ng∆∞·ªùi d√πng ƒë√£ nh·∫≠p
                    "service": svc_pick,
                    "preferred_branch": preferred_branch or None,
                }
                r = requests.post(f"{api_url}/pickup", json=payload_pick, timeout=30)
                if r.status_code != 200:
                    st.error(f"L·ªói API pickup: {r.text}")
                else:
                    pick = r.json()
                    if pick["options"]:
                        dfp = pd.DataFrame(pick["options"])
                        st.dataframe(dfp, use_container_width=True, hide_index=True)
                    best = pick.get("best")
                    if best:
                        st.success(f"‚úÖ G·ª£i √Ω: **{best['provider']}** ({best['service_group']}) ‚Ä¢ "
                                   f"~{best['distance_km']:.1f} km ‚Ä¢ **{best['cost_vnd']:,} ƒë** ‚Äî {best['note']}")
                    else:
                        st.warning("Kh√¥ng c√≥ ph∆∞∆°ng √°n kh·∫£ thi. H√£y c√¢n nh·∫Øc t·ª± mang ra nh√† xe g·∫ßn nh·∫•t.")
            except requests.exceptions.RequestException as e:
                st.error(f"L·ªói g·ªçi API pickup: {e}")
    
    st.divider()
    st.header("‚úàÔ∏è L·ªãch bay g·∫ßn nh·∫•t")
    
    with st.expander("Xem l·ªãch bay theo tuy·∫øn", expanded=True):
        route_f = st.selectbox("Tuy·∫øn", ["USA","JAPAN","TW","KOREA"])
        if st.button("T·∫£i l·ªãch bay"):
            try:
                rr = requests.post(f"{api_url}/flight", json={"route": route_f}, timeout=30)
                if rr.status_code != 200:
                    st.error(f"L·ªói API flight: {rr.text}")
                else:
                    fl = rr.json()
                    rows = fl.get("rows", [])
                    if rows:
                        st.dataframe(pd.DataFrame(rows), use_container_width=True, hide_index=True)
                    best = fl.get("best")
                    if best:
                        st.success(
                            f"‚úÖ **Chuy·∫øn g·∫ßn nh·∫•t**: {best['day']} ‚Ä¢ "
                            f"C·∫Øt h√†ng: **{best['cutoff_date']}** ‚Ä¢ Bay: **{best['flight_date']}**"
                            + (f" ‚Ä¢ Nh·∫≠n s·ªõm: {best['receive_earliest']}" if best.get("receive_earliest") else "")
                            + (f" ‚Ä¢ Nh·∫≠n mu·ªôn: {best['receive_latest']}" if best.get("receive_latest") else "")
                        )
                    else:
                        st.warning("Ch∆∞a x√°c ƒë·ªãnh ƒë∆∞·ª£c chuy·∫øn ph√π h·ª£p.")
            except requests.exceptions.RequestException as e:
                st.error(f"L·ªói g·ªçi API flight: {e}")

    # --- T·∫£i d·ªØ li·ªáu JSON k·∫øt qu·∫£
    st.download_button(
        "‚¨áÔ∏è T·∫£i JSON k·∫øt qu·∫£",
        data=json.dumps(data, ensure_ascii=False, indent=2),
        file_name="quote_result.json",
        mime="application/json",
    )

    # G·ª£i √Ω h√†nh ƒë·ªông ti·∫øp theo
    st.caption("üí° M·∫πo: C·∫≠p nh·∫≠t b·∫£ng ph·ª• ph√≠ (Google Sheets) ƒë·ªÉ hi·ªÉn th·ªã chi ti·∫øt h∆°n cho t·ª´ng m·∫∑t h√†ng.")
